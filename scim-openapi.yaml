openapi: 3.0.3
info:
  title: SCIM 2.0 API
  version: 1.0.0
  description: >
    SCIM 2.0-compliant user provisioning API for Keycloak. All endpoints require OAuth2
    client credentials authentication (Bearer token). The client must be authenticated and
    the service account must have the realm role `scim-access`.

servers:
  - url: https://example.com/scim/v2

paths:
  /Users:
    get:
      summary: List users
      operationId: listUsers
      tags: [Users]
      description: >
        Returns a list of users in the current realm.

        Requires:
        - OAuth2 access token (Bearer token)
        - The client must be authenticated via client credentials
        - The service account must have the realm role `scim-access`
      security:
        - bearerAuth: []
      parameters:
        - name: filter
          in: query
          description: SCIM filter expression (e.g. `userName eq "alice@example.com"`)
          required: false
          schema:
            type: string
        - name: startIndex
          in: query
          schema:
            type: integer
        - name: count
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: List of users
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/UsersList'

    post:
      summary: Create user
      operationId: createUser
      tags: [Users]
      description: >
        Creates a new user in the realm.

        Requires:
        - OAuth2 access token (Bearer token)
        - The service account must have the realm role `scim-access`
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'

  /Users/{id}:
    get:
      summary: Get user by ID
      operationId: findUser
      tags: [ Users ]
      description: >
        Retrieves a user by SCIM ID.
        
        Requires:
        - OAuth2 access token (Bearer token)
        - The client must be authenticated via client credentials
        - The service account must have the realm role `scim-access`
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: SCIM user ID
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete user
      operationId: deleteUser
      tags: [Users]
      description: >
        Deletes a user by ID.

        Requires:
        - OAuth2 access token (Bearer token)
        - The service account must have the realm role `scim-access`
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted

    patch:
      summary: Update user
      operationId: patchUser
      tags: [Users]
      description: >
        Updates a user using SCIM PATCH semantics.

        Requires:
        - OAuth2 access token (Bearer token)
        - The service account must have the realm role `scim-access`
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/scim+json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          description: User updated
          content:
            application/scim+json:
              schema:
                $ref: '#/components/schemas/User'

  /ResourceTypes:
    get:
      summary: List SCIM resource types
      operationId: listResourceTypes
      tags: [Metadata]
      description: >
        Returns the SCIM resource types supported by the server (e.g., User, Group).

        Requires:
        - OAuth2 access token (Bearer token)
        - The client must be authenticated via client credentials
        - The service account must have the realm role `scim-access`
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of SCIM resource types
          content:
            application/scim+json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceType'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    UsersList:
      type: object
      properties:
        totalResults:
          type: integer
        startIndex:
          type: integer
        itemsPerPage:
          type: integer
        Resources:
          type: array
          items:
            $ref: '#/components/schemas/User'

    User:
      type: object
      required:
        - userName
        - schemas
      properties:
        id:
          type: string
        userName:
          type: string
        name:
          type: object
          properties:
            givenName:
              type: string
            familyName:
              type: string
        emails:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              primary:
                type: boolean
        active:
          type: boolean
        schemas:
          type: array
          items:
            type: string

    PatchRequest:
      type: object
      required:
        - schemas
        - Operations
      properties:
        schemas:
          type: array
          items:
            type: string
          example: ["urn:ietf:params:scim:api:messages:2.0:PatchOp"]
        Operations:
          type: array
          items:
            type: object
            properties:
              op:
                type: string
                enum: [add, remove, replace]
              path:
                type: string
              value:
                type: object
    ResourceType:
      type: object
      required:
        - schemas
        - id
        - name
        - endpoint
        - schema
        - meta
      properties:
        schemas:
          type: array
          items:
            type: string
          example:
            - "urn:ietf:params:scim:schemas:core:2.0:ResourceType"
        id:
          type: string
          example: "User"
        name:
          type: string
          example: "User"
        endpoint:
          type: string
          example: "/Users"
        description:
          type: string
          example: "User Account"
        schema:
          type: string
          example: "urn:ietf:params:scim:schemas:core:2.0:User"
        schemaExtensions:
          type: array
          items:
            type: object
            required:
              - schema
              - required
            properties:
              schema:
                type: string
              required:
                type: boolean
        meta:
          type: object
          required:
            - location
            - resourceType
          properties:
            location:
              type: string
              format: uri
              example: "https://example.com/v2/ResourceTypes/User"
            resourceType:
              type: string
              example: "ResourceType"